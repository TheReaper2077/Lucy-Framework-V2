#include <LucyGL/Types.h>
#include <glad/glad.h>
#include <unordered_map>
#include <assert.h>

#define KEY key
#define ELEMENT_MAP(x, y) if (KEY == x) return y;

#define EVAL0(...) __VA_ARGS__
#define EVAL1(...) EVAL0(EVAL0(EVAL0(__VA_ARGS__)))
#define EVAL2(...) EVAL1(EVAL1(EVAL1(__VA_ARGS__)))
#define EVAL3(...) EVAL2(EVAL2(EVAL2(__VA_ARGS__)))
#define EVAL4(...) EVAL3(EVAL3(EVAL3(__VA_ARGS__)))
#define EVAL(...)  EVAL4(EVAL4(EVAL4(__VA_ARGS__)))

#define MAP_END(...)
#define MAP_OUT
#define MAP_COMMA ,

#define VALUE(i, x, y) if (i == x) return y;

#define MAP_GET_END2() 0, MAP_END
#define MAP_GET_END1(...) MAP_GET_END2
#define MAP_GET_END(...) MAP_GET_END1
#define MAP_NEXT0(test, next, ...) next MAP_OUT
#define MAP_NEXT1(test, next) MAP_NEXT0(test, next, 0)
#define MAP_NEXT(test, next)  MAP_NEXT1(MAP_GET_END test, next)

#define MAP0(f, x, y, peek, ...) VALUE(f, x, y) MAP_NEXT(peek, MAP1)(f, peek, __VA_ARGS__)
#define MAP1(f, x, y, peek, ...) VALUE(f, x, y) MAP_NEXT(peek, MAP0)(f, peek, __VA_ARGS__)

#define MAP(f, ...) EVAL(MAP1(f, __VA_ARGS__, ()()(), ()()(), ()()(), 0))

const unsigned int lgl::Map(const Type KEY) {
	MAP(KEY,
		lgl::BYTE, GL_BYTE,
		lgl::UNSIGNED_BYTE, GL_UNSIGNED_BYTE,
		lgl::SHORT, GL_SHORT,
		lgl::UNSIGNED_SHORT, GL_UNSIGNED_SHORT,
		lgl::INT, GL_INT,
		lgl::UNSIGNED_INT, GL_UNSIGNED_INT,
		lgl::FLOAT, GL_FLOAT,
		lgl::UNSIGNED_INT_24_8, GL_UNSIGNED_INT_24_8
	);

	assert(false);
}

const unsigned int lgl::Map(const Format KEY) {
	ELEMENT_MAP(lgl::RGB, GL_RGB);
	ELEMENT_MAP(lgl::RGBA, GL_RGBA);
	ELEMENT_MAP(lgl::RGBA32F, GL_RGBA32F);
	ELEMENT_MAP(lgl::RGB32F, GL_RGB32F);
	ELEMENT_MAP(lgl::RGBA16F, GL_RGBA16F);
	ELEMENT_MAP(lgl::RGB16F, GL_RGB16F);
	ELEMENT_MAP(lgl::DEPTH_STENCIL, GL_DEPTH_STENCIL);
	ELEMENT_MAP(lgl::DEPTH24_STENCIL8, GL_DEPTH24_STENCIL8);

	assert(false);
}

const unsigned int lgl::Map(const Primitive KEY) {
	ELEMENT_MAP(lgl::POINT, GL_POINTS);
	ELEMENT_MAP(lgl::LINE, GL_LINES);
	ELEMENT_MAP(lgl::LINE_STRIP, GL_LINE_STRIP);
	ELEMENT_MAP(lgl::TRIANGLE, GL_TRIANGLES);
	ELEMENT_MAP(lgl::TRIANGLE_FAN, GL_TRIANGLE_FAN);
	ELEMENT_MAP(lgl::TRIANGLE_STRIP, GL_TRIANGLE_STRIP);

	assert(false);
}

const unsigned int lgl::Map(const TextureFilteringMode KEY) {
	ELEMENT_MAP(lgl::FilterMode_LINEAR, GL_LINEAR);
	ELEMENT_MAP(lgl::FilterMode_NEAREST, GL_NEAREST);

	assert(false);
}

const unsigned int lgl::Map(const TextureWrapMode KEY) {
	ELEMENT_MAP(lgl::WrapMode_CLAMP_TO_EDGE, GL_CLAMP_TO_EDGE);
	ELEMENT_MAP(lgl::WrapMode_CLAMP_TO_BORDER, GL_CLAMP_TO_BORDER);
	ELEMENT_MAP(lgl::WrapMode_MIRRORED_REPEAT, GL_MIRRORED_REPEAT);
	ELEMENT_MAP(lgl::WrapMode_REPEAT, GL_REPEAT);
	ELEMENT_MAP(lgl::WrapMode_MIRROR_CLAMP_TO_EDGE, GL_MIRROR_CLAMP_TO_EDGE);

	assert(false);
}

const unsigned int lgl::Map(const TextureMode KEY) {
	ELEMENT_MAP(lgl::TEXTURE_1D, GL_TEXTURE_1D);
	ELEMENT_MAP(lgl::TEXTURE_2D, GL_TEXTURE_2D);
	ELEMENT_MAP(lgl::TEXTURE_3D, GL_TEXTURE_3D);
	ELEMENT_MAP(lgl::TEXTURE_1D_ARRAY, GL_TEXTURE_1D_ARRAY);
	ELEMENT_MAP(lgl::TEXTURE_2D_ARRAY, GL_TEXTURE_2D_ARRAY);
	ELEMENT_MAP(lgl::TEXTURE_RECTANGLE, GL_TEXTURE_RECTANGLE);
	ELEMENT_MAP(lgl::TEXTURE_CUBE_MAP, GL_TEXTURE_CUBE_MAP);
	ELEMENT_MAP(lgl::TEXTURE_BUFFER, GL_TEXTURE_BUFFER);
	ELEMENT_MAP(lgl::TEXTURE_2D_MULTISAMPLE, GL_TEXTURE_2D_MULTISAMPLE);
	ELEMENT_MAP(lgl::TEXTURE_2D_MULTISAMPLE_ARRAY, GL_TEXTURE_2D_MULTISAMPLE_ARRAY);

	assert(false);
}

const unsigned int lgl::Map(const Attachment KEY) {
	ELEMENT_MAP(lgl::COLOR_ATTACHMENT0, GL_COLOR_ATTACHMENT0);
	ELEMENT_MAP(lgl::COLOR_ATTACHMENT1, GL_COLOR_ATTACHMENT1);
	ELEMENT_MAP(lgl::COLOR_ATTACHMENT2, GL_COLOR_ATTACHMENT2);
	ELEMENT_MAP(lgl::COLOR_ATTACHMENT3, GL_COLOR_ATTACHMENT3);
	ELEMENT_MAP(lgl::COLOR_ATTACHMENT4, GL_COLOR_ATTACHMENT4);
	ELEMENT_MAP(lgl::COLOR_ATTACHMENT5, GL_COLOR_ATTACHMENT5);
	ELEMENT_MAP(lgl::COLOR_ATTACHMENT6, GL_COLOR_ATTACHMENT6);
	ELEMENT_MAP(lgl::COLOR_ATTACHMENT7, GL_COLOR_ATTACHMENT7);
	ELEMENT_MAP(lgl::COLOR_ATTACHMENT8, GL_COLOR_ATTACHMENT8);
	ELEMENT_MAP(lgl::COLOR_ATTACHMENT9, GL_COLOR_ATTACHMENT9);
	ELEMENT_MAP(lgl::COLOR_ATTACHMENT10, GL_COLOR_ATTACHMENT10);
	ELEMENT_MAP(lgl::COLOR_ATTACHMENT11, GL_COLOR_ATTACHMENT11);
	ELEMENT_MAP(lgl::COLOR_ATTACHMENT12, GL_COLOR_ATTACHMENT12);
	ELEMENT_MAP(lgl::COLOR_ATTACHMENT13, GL_COLOR_ATTACHMENT13);
	ELEMENT_MAP(lgl::COLOR_ATTACHMENT14, GL_COLOR_ATTACHMENT14);
	ELEMENT_MAP(lgl::COLOR_ATTACHMENT15, GL_COLOR_ATTACHMENT15);
	ELEMENT_MAP(lgl::COLOR_ATTACHMENT16, GL_COLOR_ATTACHMENT16);
	ELEMENT_MAP(lgl::COLOR_ATTACHMENT17, GL_COLOR_ATTACHMENT17);
	ELEMENT_MAP(lgl::COLOR_ATTACHMENT18, GL_COLOR_ATTACHMENT18);
	ELEMENT_MAP(lgl::COLOR_ATTACHMENT19, GL_COLOR_ATTACHMENT19);
	ELEMENT_MAP(lgl::COLOR_ATTACHMENT20, GL_COLOR_ATTACHMENT20);
	ELEMENT_MAP(lgl::COLOR_ATTACHMENT21, GL_COLOR_ATTACHMENT21);
	ELEMENT_MAP(lgl::COLOR_ATTACHMENT22, GL_COLOR_ATTACHMENT22);
	ELEMENT_MAP(lgl::COLOR_ATTACHMENT23, GL_COLOR_ATTACHMENT23);
	ELEMENT_MAP(lgl::COLOR_ATTACHMENT24, GL_COLOR_ATTACHMENT24);
	ELEMENT_MAP(lgl::COLOR_ATTACHMENT25, GL_COLOR_ATTACHMENT25);
	ELEMENT_MAP(lgl::COLOR_ATTACHMENT26, GL_COLOR_ATTACHMENT26);
	ELEMENT_MAP(lgl::COLOR_ATTACHMENT27, GL_COLOR_ATTACHMENT27);
	ELEMENT_MAP(lgl::COLOR_ATTACHMENT28, GL_COLOR_ATTACHMENT28);
	ELEMENT_MAP(lgl::COLOR_ATTACHMENT29, GL_COLOR_ATTACHMENT29);
	ELEMENT_MAP(lgl::COLOR_ATTACHMENT30, GL_COLOR_ATTACHMENT30);
	ELEMENT_MAP(lgl::COLOR_ATTACHMENT31, GL_COLOR_ATTACHMENT31);
	ELEMENT_MAP(lgl::DEPTH_ATTACHMENT, GL_DEPTH_ATTACHMENT);
	ELEMENT_MAP(lgl::STENCIL_ATTACHMENT, GL_STENCIL_ATTACHMENT);
	ELEMENT_MAP(lgl::DEPTH_STENCIL_ATTACHMENT, GL_DEPTH_STENCIL_ATTACHMENT);

	assert(false);
}